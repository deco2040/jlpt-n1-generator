// api/modules/topicIndexer.js

/**
 * Î†àÎ≤®Î≥Ñ Ï£ºÏ†ú Ïù∏Îç±Ïä§ ÏÉùÏÑ±
 * @param {Object} topicsData - topics.json Îç∞Ïù¥ÌÑ∞
 * @returns {Object} Î†àÎ≤®Î≥Ñ Ï£ºÏ†ú Î∞∞Ïó¥
 */
export function buildTopicIndex(topicsData) {
  console.log("üî® Ï£ºÏ†ú Ïù∏Îç±Ïä§ ÏÉùÏÑ± Ï§ë...");

  const index = {
    N1: [],
    N2: [],
    N3: [],
    N4: [],
  };

  let totalProcessed = 0;
  let noLevelCount = 0;

  Object.entries(topicsData.topics).forEach(([categoryKey, categoryData]) => {
    if (!categoryData.items || !Array.isArray(categoryData.items)) {
      console.warn(`‚ö†Ô∏è Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå: ${categoryKey}`);
      return;
    }

    categoryData.items.forEach((item) => {
      totalProcessed++;

      if (!item.levels || item.levels.length === 0) {
        noLevelCount++;
        console.warn(
          `‚ö†Ô∏è Î†àÎ≤® ÏóÜÎäî Ï£ºÏ†ú [${categoryKey}]: ${item.topic?.substring(
            0,
            30
          )}...`
        );
        return;
      }

      // Í∞Å Î†àÎ≤®Ïóê Ï£ºÏ†ú Ï∂îÍ∞Ä
      item.levels.forEach((level) => {
        if (index[level]) {
          index[level].push(item.topic);
        } else {
          console.warn(`‚ö†Ô∏è Ïïå Ïàò ÏóÜÎäî Î†àÎ≤®: ${level}`);
        }
      });
    });
  });

  // Ï§ëÎ≥µ Ï†úÍ±∞
  Object.keys(index).forEach((level) => {
    const before = index[level].length;
    index[level] = [...new Set(index[level])];
    const after = index[level].length;

    if (before !== after) {
      console.log(`  ${level}: ${before - after}Í∞ú Ï§ëÎ≥µ Ï†úÍ±∞`);
    }
  });

  console.log("\n‚úÖ Ïù∏Îç±Ïä§ ÏÉùÏÑ± ÏôÑÎ£å:");
  console.log("‚îÅ".repeat(50));
  console.log(`Ï¥ù Ï≤òÎ¶¨: ${totalProcessed}Í∞ú`);
  console.log(`Î†àÎ≤® ÏóÜÏùå: ${noLevelCount}Í∞ú`);
  console.log("\nÎ†àÎ≤®Î≥Ñ Ï£ºÏ†ú Ïàò:");
  Object.entries(index).forEach(([level, topics]) => {
    console.log(`  ${level}: ${topics.length}Í∞ú`);
  });
  console.log("‚îÅ".repeat(50));

  return index;
}
